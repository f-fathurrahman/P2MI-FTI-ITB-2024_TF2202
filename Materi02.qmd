---
title: "TF2202: Draft"
author: "Fadjar Fathurrahman"
format: html
lang: id
language:
  id:
    crossref-eq-prefix: Persamaan
    section-title-abstract: Abstrak
---

Galat pembulatan berhubungan langsung dengan bagaimana cara suatu bilangan
disimpan pada komputer.

Sistem bilangan: suatu konvensi untuk merepresentasikan
kuantitas numerik. Contoh: sistem desimal atau basis-10: ada 10 digit
yang digunakan.

Contoh:
$$
86409 = (8 \times 10^4) + (6 \times 10^3) + (4 \times 10^2) + (0 \times 10^1) +
(9\times 10^0)
$$

Notasi posisi, nilai tempat.

Komputer menggunakan basis-2 untuk merepresentasikan bilangan atau sistem biner.


Representasi bilangan bulat.

Metode magnitudo bertanda (*signed magnitude method*) digunakan pada komputer
untuk merepresentasikan suatu bilangan. Bit pertama digunakan untuk menyatakan tanda
(0 untuk bilangan positif dan 1 untuk bilangan negatif).
Bit yang lain digunakan untuk menyimpan magnitudo bilangan.
Misalnya bilangan -173 pada komputer dengan 16-bit

Tentukan bilangan bulat dalam basis-10 yang dapat direpresentasikan dalam
16-bit.

Dari 16 bit yang tersedia, bit pertama digunakan menyimpan tanda.
15 bit yang tersisa dapat digunakan untuk menyimpan bilangan biner
dari 0 sampai 111111111111111 yang sama dengan
$$
(1 \times 2^{14}) + (1 \times 2^{13}) + \cdots + (1 \times 2^{1}) +
(1 \times 2^{0}) = 32676
$$

Oleh karena itu 16 bit dapat digunakan untuk merepresentasikan bilangan bulat
dari -32767 sampai 32767
Bilangan 0 sudah didefinisikan sebagai 0000000000000000, maka
1000000000000000 tidak perlu digunakan untuk menyatakan minus 0. Oleh karena itu
biasanya representasi biner tersebut digunakan untuk mereprentasikan bilangan
negatif tambahan, yaitu -32768.

## Representasi bilangan titik-mengambang (*floating point*)

Kuantitas numerik dengan pecahan dan yang memiliki digit di belakang koma, biasanya direpresentasikan
pada komputer dengan menggunakan format bilangan titik-mengambang atau sering disebut sebagai
*floating-point number*. Pada pendekatan ini, suatu bilangan dinyatakan sebagai:

$$
\pm s \times b^{e}
$$

dengan $s$ adalah significand atau mantissa, $b$ adalah basis dari sistem
bilangan yang digunakan, dan $e$ adalah eksponen.

Sebelum dinyatakan dalam bentuk ini, suatu bilangan dinormalisasi terlebih dahulu dengan cara
memindahkan titik, desimal, biner dan sebagainya sedemikian rupa sehingga hanya satu digit
yang berada di kiri tanda titik. Hal ini dilakukan untuk menghemat memori karena tidak ada
bilangan nol yang tidak signifikan yang perlu disimpan.
Misalnya bilangan 0.005678 dapat direpresentasikan tanpa normalisasi sebagai
$0.005678 \times 10^{0}$. Namun dengan normalisasi, nilai tersebut akan disimpan
sebagai $5.678 \times 10^{-3}$, artinya dua nol sebelum digit 5 tidak perlu disimpan.
Ketika kita melakukan normalisasi untuk bilangan dengan basis 2, digit yang berada di kiri tanda
titik biner akan selalu bernilai 1.

Implikasi dari representasi *floating point*

Misalkan kita memiliki komputer basis-10 dengan ukuran word 5 diti. Asumsikan bahwa satu digit
akan digunakan sebagai tanda (sign), dua untuk eksponen, dan dua untuk mantissa.
Asumsikan juga satu digit dari eksponen digunakan untuk menyimpan tanda, dan satu digit lagi
untuk besar dari eksponen.

$$
s_1 d_1 d_2 \times 10^{s_0 d_0}
$$

$s_0, s_1$: tanda

$d_0$: magnitudo dari eksponen

$d_1, d_2$ adalah magnitudo dari digit mantissa.

Angka terbesar yang dapat direpresentasikan adalah
$$
\text{angka terbesar} = +9.9 \times 10^{+9}
$$

Angka terkecil yang dapat direpresentasikan adalah
$$
\text{angka terkecil} = -1.0 \times 10^{-9}
$$


Bilangan positif dan negatif yang berada di luar jangkauan ini akan mengakibatkan
kesalahan luapan atau *overflow error* (untuk bilangan yang lebih besar) atau
*underflow error* (untuk bilangan yang lebih kecil).


